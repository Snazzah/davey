import * as chai from 'chai';
import chaiAsPromised from 'chai-as-promised';
chai.use(chaiAsPromised);
import 'mocha';
import { rawToPKCS8, signWithLabel, verifyWithLabel } from '../src/util';
const expect = chai.expect;

describe('signWithLabel', () => {
  it('should sign properly', async () => {
    const data = new Uint8Array([
      0x40, 0x41, 0x04, 0x9E, 0xE6, 0x0D, 0x29, 0x6C, 0x0D, 0xA3, 0x55, 0xE6, 0xA8, 0x39, 0x04, 0xA6, 
      0x2B, 0x02, 0xE7, 0x62, 0x83, 0x3A, 0x95, 0xC0, 0x67, 0x9B, 0xDA, 0xAD, 0x4E, 0x62, 0x9D, 0x34, 
      0x89, 0x1F, 0xCC, 0x76, 0x9E, 0x4E, 0x57, 0x18, 0xB4, 0x56, 0xFA, 0x43, 0x1E, 0x23, 0x13, 0x98, 
      0x82, 0x55, 0xD1, 0x57, 0x6A, 0xA4, 0x69, 0x07, 0xC5, 0x80, 0x20, 0x45, 0xB0, 0x11, 0x1D, 0x2F, 
      0xA7, 0x96, 0xBC, 0x40, 0x41, 0x04, 0x89, 0x83, 0x66, 0x9D, 0x7C, 0x51, 0xBD, 0x9C, 0x2A, 0xC3, 
      0x3D, 0xF6, 0xA7, 0xFA, 0x7F, 0xAA, 0xD6, 0x10, 0x7A, 0x88, 0x9D, 0x8E, 0x85, 0x72, 0x7B, 0x1A, 
      0x38, 0xFF, 0x34, 0x73, 0xD5, 0x8E, 0xE0, 0x9F, 0xE6, 0x8B, 0x14, 0xD4, 0x03, 0xBE, 0x12, 0x4B, 
      0x42, 0xA1, 0x8B, 0xDB, 0xEA, 0x3D, 0x94, 0x6A, 0x21, 0xA4, 0x42, 0x96, 0x3D, 0xAA, 0x57, 0x70, 
      0xA6, 0x9A, 0x79, 0x7E, 0xFE, 0x86, 0x00, 0x01, 0x08, 0x02, 0x31, 0x81, 0x07, 0x09, 0x00, 0x00, 
      0x00, 0x02, 0x00, 0x01, 0x02, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 
      0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 
    ]);

    const publicKey = new Uint8Array([
      0x04, 0x89, 0x83, 0x66, 0x9D, 0x7C, 0x51, 0xBD, 0x9C, 0x2A, 0xC3, 0x3D, 0xF6, 0xA7, 0xFA, 0x7F, 
      0xAA, 0xD6, 0x10, 0x7A, 0x88, 0x9D, 0x8E, 0x85, 0x72, 0x7B, 0x1A, 0x38, 0xFF, 0x34, 0x73, 0xD5, 
      0x8E, 0xE0, 0x9F, 0xE6, 0x8B, 0x14, 0xD4, 0x03, 0xBE, 0x12, 0x4B, 0x42, 0xA1, 0x8B, 0xDB, 0xEA, 
      0x3D, 0x94, 0x6A, 0x21, 0xA4, 0x42, 0x96, 0x3D, 0xAA, 0x57, 0x70, 0xA6, 0x9A, 0x79, 0x7E, 0xFE, 
      0x86, 
    ]);
  
    const privateKey = rawToPKCS8(new Uint8Array([
      0x43, 0x7C, 0xE5, 0x53, 0xE8, 0xD1, 0x1D, 0x76, 0xDF, 0xC9, 0xE8, 0xEA, 0x99, 0x4F, 0xB3, 0xA8, 
      0x2E, 0xC8, 0x16, 0x9A, 0x02, 0xE8, 0xF6, 0x02, 0xD3, 0x83, 0xDB, 0xEA, 0xA7, 0x8A, 0x60, 0x27, 
    ]));

    const signature = await signWithLabel(privateKey, 'LeafNodeTBS', data);
    expect(signature).to.be.a('Uint8Array');
    expect(verifyWithLabel(publicKey, 'LeafNodeTBS', signature, data)).to.eventually.equal(true);
  });
});